// Mocks generated by Mockito 5.4.6 from annotations
// in tennis_booking_app/test/presentation/bloc/booking_list/booking_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tennis_booking_app/domain/entities/booking.dart' as _i5;
import 'package:tennis_booking_app/domain/repositories/booking_repository.dart'
    as _i2;
import 'package:tennis_booking_app/domain/usecases/delete_booking.dart' as _i6;
import 'package:tennis_booking_app/domain/usecases/get_all_bookings.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBookingRepository_0 extends _i1.SmartFake
    implements _i2.BookingRepository {
  _FakeBookingRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetAllBookings].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllBookings extends _i1.Mock implements _i3.GetAllBookings {
  MockGetAllBookings() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookingRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookingRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookingRepository);

  @override
  _i4.Future<List<_i5.Booking>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue: _i4.Future<List<_i5.Booking>>.value(<_i5.Booking>[]),
          )
          as _i4.Future<List<_i5.Booking>>);
}

/// A class which mocks [DeleteBooking].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteBooking extends _i1.Mock implements _i6.DeleteBooking {
  MockDeleteBooking() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.BookingRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeBookingRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.BookingRepository);

  @override
  _i4.Future<void> call(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#call, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}
